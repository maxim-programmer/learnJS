	Инструкция "if"
 Инструкция if(...) вычисляет условие в скобках и, если результат true, то 
выполняет блок кода. В фигурных скобках находятся инструкции.

	Преобразование к логическому типу
 Инструкция if (…) вычисляет выражение в скобках и преобразует результат к 
логическому типу.

	Блок "else"
 Инструкция if может содержать необязательный блок «else» («иначе»). Он 
выполняется, когда условие ложно.

	Несколько условий: "else if"
 Иногда нужно проверить несколько вариантов условия. Для этого используется 
блок else if.

	Условный оператор "?"
 Если нужно определить переменную в зависимости от условия, то можно 
использовать тернарный оператор, представленный знаком вопроса "?".
 let result = условие ? значение1 : значение2
 Сначала вычисляется условие: если оно истинно, тогда возвращается 
значение1, в противном случае – значение2.

	Несколько операторов "?"
 Последовательность операторов вопросительного знака ? позволяет вернуть 
значение, которое зависит от более чем одного условия.
1 let age = prompt('Возраст?', 18);
2 
3 let message = (age < 3) ? 'Здравствуй, малыш!' :
4   (age < 18) ? 'Привет!' :
5   (age < 100) ? 'Здравствуйте!' :
6   'Какой необычный возраст!';
7
8 alert(message);
 Вот как это выглядит при использовании if..else:
1 if (age < 3) {
2   message = 'Здравствуй, малыш!';
3 } else if (age < 18) {
4   message = 'Привет!';
5 } else if (age < 100) {
6   message = 'Здравствуйте!';
7 } else {
8   message = 'Какой необычный возраст!';
9 }

	Нетрадиционное использование "?"
 Иногда оператор "?" используется в качестве замены if:
1 let company = prompt('Какая компания создала JS?', '');
2
3 (company == 'Netscape') ?
4   alert('Верно!') : alert('Неправильно.');
 Здесь мы не присваиваем результат переменной. Вместо этого мы выполняем 
различный код в зависимости от условия.
 Не рекомендуется использовать оператор вопросительного знака таким образом.
Да, короче чем if, но хуже читается. Использовать только для того, чтобы 
вернуть то или иное значение.
