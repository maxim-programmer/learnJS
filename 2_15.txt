				Функции
 Чтобы не повторять один и тот же код во многих местах, придуманы функции. 
Функции являются основными "строительными блоками" программы.

	Объявление функции
1 function nameFunction(параметры, через, запятую) {
2   ...тело, код функции...
3 }
 Вызов nameFunction выполняет код функции.

	Локальные переменные
 Переменные, объявленные внутри функции, видны только внутри этой функции.

	Внешние переменные
 У функции есть доступ к внешним переменным. Функция обладает полным 
доступом к внешним переменным и может изменять их значение.
 Внешняя переменная используется, только если внутри функции нет такой 
локальной.
 Если одноимённая переменная объявляется внутри функции, тогда она 
перекрывает внешнюю.

	(i) Глобальные переменные
 Переменные, объявленные снаружи всех функций, называются глобальными.
 Глобальные переменные видимы для любой функции (если только их не 
перекрывают одноимённые локальные переменные).
 Желательно сводить использование глобальных переменных к минимуму.

	Параметры
 Мы можем передать внутрь функции любую информацию, используя параметры.
 Значение, передаваемое в качестве параметра функции, также называется 
аргументом.
 Мы объявляем функции со списком параметров, затем вызываем их, передавая 
аргументы.

	Значения по умолчанию
 Если при вызове функции аргумент не был указан, то его значением 
становится undefined.
 Если мы хотим задать параметру значение по умолчанию, мы должны указать 
его после = .
 В JS параметры по умолчанию вычисляются каждый раз, когда функция 
вызывается без соответствующего аргумента.
 Ранние версии JS не поддерживали параметры по умолчанию. Поэтому делали 
через явную проверку на undefined (через if) или с помощью оператора ||. 
С помощью таких же способов можно присваивать значения по умолчанию для 
параметров не в объявлении функции, а на более позднем этапе.
 Современные движки JS поддерживают оператор нулевого слияния ??:  
alert(параметр ?? "значение").

	Возврат значения
 Функция может вернуть результат, который будет передан в вызывавший её код.
 Директива return может находиться в любом месте тела функции. Как только 
выполнение доходит до этого места, функция останавливается, и значение 
возвращается в вызвавший её код.
 Вызовов return может быть несколько.
 Возможно использовать return и без значения. Это приведёт к немедленному 
выходу из функции.
 Результат функции с пустым return или без него - undefined.
 Никогда не добавляйте перевод строки между return и его значением.

	Выбор имени функции
 Имя функции обычно является глаголом. Оно должно быть кратким, точным и 
описывать действие функции. Как правило, используются глагольные префиксы, обозначающие общий характер действия, после которых следует уточнение.
 Функции, начинающиеся с...
- "show" - что-то показывают
- "get" - возвращают значение
- "calc" - что-то вычисляют
- "create" - что-то создают
- "check" - что-то проверяют и возвращают логическое значение
 Одна функция - одно действие. Функция должна делать только то, что явно 
подразумевается её названием. И это должно быть одним действием.
 Имена функций, которые используются очень часто, иногда делают 
сверхкороткими.

	Функции == Комментарии
 Небольшие функции не только облегчают тестирование и отладку – само 
существование таких функций выполняет роль хороших комментариев!
