 Переменная в JavaScript может содержать любые данные. В один момент там 
может быть строка, а в другой число. Языки программирования, в которых такое 
возможно, называются "динамически типизированными".

 Числовой тип данных (number) представляет как целочисленные значения, так и 
числа с плавающей точкой. 
 Существуют множество операций для чисел.
 Кроме обычных чисел, существуют так называемые "специальные числовые 
значения", которые относятся к этому типу данных: Infinity (математическая 
бесконечность), -Infinity (минус бесконечность) и NaN (означает 
вычислительную ошибку).
 Значение NaN "прилипчиво". Любая математическая операция с NaN возвращает 
NaN. НО NaN  ** 0 равно 1.
 Математические операции в JS безопасны. Мы можем делать что угодно: делить 
на ноль, обращаться с нечисловыми строками как с числами и т.д.

 В JS тип number не может безопасно работать с числами, большими, чем 
(2^53 - 1) или меньшими, чем -(2^53 - 1) для отрицательных чисел.
 Тип BigInt был добавлен в JS, чтобы дать возможность работать с целыми 
числами произвольной длины.
 Чтобы создать значение типа BigInt, необходимо добавить n в конец числового 
литерала.

 Строка (string) в JS должна быть заключена в кавычки("", '', ``)
 Обратные кавычки (``) позволяют нам встраивать выражения в строку, заключая 
их в ${...} .
 В JS нет отдельного типа данных для одного символа.

 Булевый тип (boolean) может принимать только два значения: true/false.

 Значение null формирует отдельный тип, который содержит только значение 
null.
 Это просто специальное значение, которое представляет собой "ничего", 
"пусто" или "значение неизвестно".
 Значение undefined формирует тип из самого себя так же, как и null.
 Оно означает, что "значение не было присвоено". Если переменная объявлена, 
но ей не присвоено никакого значения, то её значением будет undefined.
 Технически мы можем присвоить значение undefined любой переменной, но так 
делать не рекомендуется. Обычно null используется для присвоения переменной 
"пустого" или "неизвестного" значения, а undefined - для проверок, была ли 
переменная назначена.

 Тип object - особенный.
 Все остальные типы называются "примитивными", потому что их значениями 
могут быть только простые значения. В объектах же хранят коллекции данных 
или более сложные структуры.

 Тип symbol используется для создания уникальных идентификаторов в объектах.

 Оператор typeof возвращает тип аргумента. Это полезно, когда мы хотим 
обрабатывать значения различных типов по-разному или просто хотим сделать 
проверку. 
 Две синтаксические формы: typeof 5 ИЛИ typeof(5).
 Если передается выражение, то нужно заключать его в скобки, т.к. typeof 
имеет более высокий приоритет, чем бинарные операторы.
 Возвращает строку с именем типа.
 typeof null = "object" (ошибка в JS)
