	Термины: унарный, бинарный, операнд
 Операнд - то, к чему применяется оператор.
 Унарный оператор применяется к одному операнду (н-р: унарный минус).
 Бинарный оператор применяется к двум операндам.

	Математика
 Поддерживаются следующие математические операторы:
1) Сложение	+
2) Вычитание	-
3) Умножение	*
4) Деление	/
5) Взятие остатка от деления	%
6) Возведение в степень		**

	Сложение строк при помощи бинарного +
 Если бинарный оператор + применить к строкам, то он их объединяет в одну.
 Если хотя бы один операнд является строкой, то второй будет также 
преобразован в строку.
 Сложение и преобразование строк — это особенность бинарного плюса +. 
Другие арифметические операторы работают только с числами и всегда 
преобразуют операнды в числа.

	Приведение к числу, унарный +
 Унарный плюс ничего не делает с числами. Но если операнд не число, 
унарный плюс преобразует его в число.

	Приоритет операторов
 Унарный плюс/минус -> возведение в степень -> умножение/деление -> 
сложение/вычитание -> присваивание

	Присваивание
 Оператор присваивания возвращает значение. Благодаря этому присваивание 
можно использовать как часть более сложного выражения:
1 let a = 1;
2 let b = 2; 
3 let c = 3 - (a = b + 1)
4 alert(a); // 3
5 alert(c); // 0
 Присваивание по цепочке: a = b = c = 2 + 2. Сначала вычисляется самое 
правое выражение 2 + 2, и затем результат присваивается переменным слева: 
c, b и a.

	Сокращенная арифметика с присваиванием
 Краткие формы записи существуют для всех арифметических и побитовых 
операторов: /=, -=, **= и так далее.
 Имеет такой же приоритет, как обычное присваивание.

	Инкремент/декремент
 Инкремент ++ увеличивает переменную на 1
 Декремент -- уменьшает переменную на 1.
 Инкремент/декремент можно применить только к переменной.
 Постфиксная форма - оператор идёт после переменной (counter++)
 Префиксная форма - оператор идёт перед переменной (++counter)
 Префиксная форма возвращает новое значение, в то время как постфиксная 
форма возвращает старое (до увеличения/уменьшения числа).

	Побитовые операторы
 Поддерживаются следующие побитовые операторы:
1) AND(и)(&)
2) OR(или)(|)
3) XOR(побитовое исключающее или)(^)
4) NOT(не)(~)
5) LEFT SHIFT(левый сдвиг)(<<)
6) RIGHT SHIFT(правый сдвиг)(>>)
7) ZERO-FILL RIGHT SHIFT(правый сдвиг с заполненными нулями)(>>>)

	Оператор "запятая"
 Оператор "запятая" предоставляет нам возможность вычислять несколько 
выражений, разделяя их запятой ",". Каждое выражение выполняется, но 
возвращается результат только последнего.
 Запятая имеет очень низкий приоритет, ниже присваивания, поэтому скобки 
важны в приведённом примере (let a = (1+2, 3+4)).
