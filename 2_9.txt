	Результат сравнения имеет логический тип

	Сравнение строк
 Строки сравниваются посимвольно. Для сравнения используется кодировка 
Unicode, а не настоящий алфавит.

	Сравнение разных типов
 При сравнении значений разных типов JS приводит каждое из них к числу.

	Строгое сравнение
 Использование обычного сравнения == может вызывать проблемы. Например, оно 
не отличает 0 от false. Это происходит из-за того, что операнды разных 
типов преобразуются оператором == к числу.
 Оператор строгого равенства === проверяет равенство без приведения типов.
Другими словами, если a и b имеют разные типы, то проверка a === b 
немедленно возвращает false без попытки их преобразования.
 Ещё есть оператор строгого неравенства !==, аналогичный !=.

	Сравнение с null и undefined
 При строгом равенстве === эти значения различны, так как различны их типы.
 При нестрогом равенстве == эти значения равны друг другу и не равны никаким 
другим значениям. Это специальное правило языка.
 При использовании математических операторов и других операторов сравнения
< > <= >= значения null/undefined преобразуются к числам: null -> 0, 
undefined -> NaN.

	Надёжные правила
 Относитесь очень осторожно к любому сравнению с undefined/null, кроме 
случаев строгого равенства ===.
 Не используйте сравнения >= > < <= с переменными, которые могут принимать 
значения null/undefined, разве что вы полностью уверены в том, что делаете. 
Если переменная может принимать эти значения, то добавьте для них отдельные 
проверки.
